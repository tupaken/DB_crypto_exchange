CREATE TABLE "USER"
(ID  INTEGER PRIMARY KEY NOT NULL,
Name VARCHAR2(30), 
Email VARCHAR2(100) UNIQUE NOT NULL, 
Password VARCHAR2(100) NOT NULL,
Kontostand DECIMAL(10,2) DEFAULT 0.00 NOT NULL, 
Registrerungs_Datum DATE NOT NULL);

CREATE TABLE WALLET 
(ID INTEGER PRIMARY KEY NOT NULL,
Kontostand DECIMAL(20,10) DEFAULT 0.00 NOT NULL ,
USER_ID INTEGER NOT NULL, 
Waehrung_ID INTEGER NOT NULL); 

CREATE TABLE Waehrung
(ID INTEGER PRIMARY KEY NOT NULL,
Name VARCHAR2(20) NOT NULL,
Pairs_ID INTEGER NOT NULL);

CREATE TABLE Pair
(ID INTEGER PRIMARY KEY NOT NULL,
BaseCrypto_ID INTEGER NOT NULL,
QuoteCrypto_ID INTEGER NOT NULL,
Kurs DECIMAL(20,10) NOT NULL);

CREATE TABLE Transaktionen
(ID INTEGER PRIMARY KEY NOT NULL,
Betrag DECIMAL(20,10) NOT NULL,
Datum_Zeit DATE NOT NULL,
typ VARCHAR2(10) NOT NULL,
Status Varchar (10) NOT NULL,
USER_ID INTEGER NOT NULL, 
Waehrung_ID INteger NOT NULL);

CREATE TABLE Offer
(ID INTEGER PRIMARY KEY NOT NULL,
USER_ID INTEGER NOT NULL,
Waehrung_ID INTEGER NOT NULL,
Betrag DECIMAL(20,10) NOT NULL,
ErstellungsDatum DATE NOT NULL,
typ VARCHAR2(10) NOT NULL,
Status Varchar (10) NOT NULL,
Preis DECIMAL(20,10) NOT NULL);

CREATE TABLE SWAP
(ID INTEGER PRIMARY KEY NOT NULL,
USER_ID INTEGER NOT NULL, 
From_Waehrung_ID INTEGER NOT NULL,
To_Waehrung_ID INTEGER NOT NULL,
Betrag DECIMAL(20,10) NOT NULL,
Wechsel_Kurs DECIMAL (20,10) NOT NULL,
Datum DATE NOT NULL);

CREATE TABLE Staking_Wallet
(ID INTEGER PRIMARY KEY NOT NULL,
USER_ID INTEGER NOT NULL, 
Waehrung_ID INTEGER NOT NULL,
Betrag DECIMAL(20,10) NOT NULL,
Start_Datum DATE NOT NULL,
End_Datum DATE,
Status VARCHAR2(10) NOT NULL);

CREATE TABLE Provider
(ID INTEGER PRIMARY KEY NOT NULL,
Dienstleistung VARCHAR2(10) NOT NULL);

CREATE TABLE Staking_Offers
(ID INTEGER PRIMARY KEY NOT NULL,
Waehrung_ID INTEGER NOT NULL,
Gewinn DECIMAL(5,2) NOT NULL, -- in %
Mindest_frist INTEGER, -- Mindets_frist in days 
MaxVolume  DECIMAL(20,10));

CREATE TABLE Investors
(ID INTEGER PRIMARY KEY NOT NULL,
Betrag DECIMAL(20,10) NOT NULL,
Waehrung_ID INTEGER NOT NULL,
Start_Datum DATE NOT NULL,
Gewinn DECIMAL(20,10) DEFAULT 0.00 NOT NULL );

CREATE TABLE Earn 
( ID INTEGER PRIMARY KEY NOT NULL,
USER_ID INTEGER NOT NULL, -- TODO
typ VARCHAR2(10) NOT NULL,
Frist INTEGER, -- in days
Mindest_Betrag DECIMAL(20,10),
Gewinn DECIMAL(20,10) DEFAULT 0.00 NOT NULL);

COMMIT;

ALTER TABLE WALLET
ADD CONSTRAINT fk_user_Wallet
FOREIGN KEY (USER_ID)
REFERENCES "USER"(ID);

ALTER TABLE WALLET
ADD CONSTRAINT fk_wahrung_Wallet
FOREIGN KEY (Waehrung_ID)
REFERENCES Waehrung(ID);

ALTER TABLE Waehrung
ADD CONSTRAINT fk_Pairs_Waehrung
FOREIGN KEY (Pairs_ID)
REFERENCES Pair(ID);

ALTER TABLE Pair
ADD CONSTRAINT fk_Base_Crypto_ID_Pair
FOREIGN KEY (BaseCrypto_ID)
REFERENCES Waehrung(ID);

ALTER TABLE Pair
ADD CONSTRAINT fk_Quote_Crypto_ID_Pair
FOREIGN KEY (QuoteCrypto_ID)
REFERENCES Waehrung(ID);

ALTER TABLE Transaktionen
ADD CONSTRAINT fk_user_Transaktionen
FOREIGN KEY (USER_ID)
REFERENCES "USER"(ID);

ALTER TABLE Transaktionen
ADD CONSTRAINT fk_wahrung_Transaktionen
FOREIGN KEY (Waehrung_ID)
REFERENCES Waehrung(ID);

ALTER TABLE Offer
ADD CONSTRAINT fk_user_Offer
FOREIGN KEY (USER_ID)
REFERENCES "USER"(ID);

ALTER TABLE Offer
ADD CONSTRAINT fk_wahrung_Offer
FOREIGN KEY (Waehrung_ID)
REFERENCES Waehrung(ID);

ALTER TABLE SWAP
ADD CONSTRAINT fk_user_Swap
FOREIGN KEY (USER_ID)
REFERENCES "USER"(ID);

ALTER TABLE SWAP
ADD CONSTRAINT fk_fr_wahrung_Swap
FOREIGN KEY (From_Waehrung_ID)
REFERENCES Waehrung(ID);

ALTER TABLE SWAP
ADD CONSTRAINT fk_to_wahrung_Swap
FOREIGN KEY (To_Waehrung_ID)
REFERENCES Waehrung(ID);

ALTER TABLE Staking_Offers
ADD CONSTRAINT fk_wahrung_Staking_Offers
FOREIGN KEY (Waehrung_ID)
REFERENCES Waehrung(ID);

ALTER TABLE Staking_Wallet
ADD CONSTRAINT fk_user_Staking_Wallet
FOREIGN KEY (USER_ID)
REFERENCES "USER"(ID);

ALTER TABLE Staking_Wallet
ADD CONSTRAINT fk_wahrung_Staking_Wallet
FOREIGN KEY (Waehrung_ID)
REFERENCES Waehrung(ID);

ALTER TABLE Investors
ADD CONSTRAINT fk_wahrung_Investors
FOREIGN KEY (Waehrung_ID)
REFERENCES Waehrung(ID);

ALTER TABLE Earn
ADD CONSTRAINT fk_user_Earn
FOREIGN KEY (USER_ID)
REFERENCES "USER"(ID);

COMMIT;


